# -*- mode: ruby -*-
# # vi: set ft=ruby :

Vagrant.require_version ">= 1.9.0"

# Defaults for config options defined in CONFIG
$num_instances = 1
$vm_memory = 1024
$vm_cpus = 2
$vm_executioncap = 100 # Max host cpu used by any vm
$instance_name_prefix = "centos"
$share_folder = false # Require vagrant-vbguest plugin
$update_etc_hostname = true # Must be enbaled for openshift - Require vagrant-hostmanager plugin

# # https://github.com/hashicorp/vagrant/issues/4015#issuecomment-131440075
# Vagrant is 'state declarative' cant react to single state change, so we need to remove sata controller manually
# Manual remove sata controller VBoxManage storagectl VM_NAME_OR_ID --remove --name 'SATA Controller'
# Sata or disk error:
# - vagrant: stop all vm
# - from vbox gui: remove sata driver, detach disk and delete disk
# - delete folder sata_hdd
# - vagrant reload 
def add_hdd_sata(vm_name, vb)
  root_dir = File.dirname(File.expand_path(__FILE__))
  file_disk = File.join(root_dir, "sata_hdd/#{vm_name}_hdd1.vdi")
  unless File.exist?(File.expand_path(file_disk))
    vb.customize ["storagectl", :id, "--name", "SATA Controller", "--add", "sata"]
    vb.customize ['createhd', '--filename', File.expand_path(file_disk), '--variant', 'Fixed', '--size', 5 * 1024]
  end
  vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', File.expand_path(file_disk)]
end

def add_hdd_ide(vm_name, vb, gb)
  root_dir = File.dirname(File.expand_path(__FILE__))
  file_disk = File.join(root_dir, "ide_hdd/#{vm_name}_hdd1.vdi")
  unless File.exist?(File.expand_path(file_disk))
    vb.customize ['createhd', '--filename', File.expand_path(file_disk), '--variant', 'Fixed', '--size', gb * 1024]
  end
  vb.customize ['storageattach', :id, '--storagectl', 'IDE', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', File.expand_path(file_disk)]
end

# required to have accurate time synch - Must be enbaled for openshift ceph
def config_time_sync(config, vb)
  # Require plugin https://github.com/dotless-de/vagrant-vbguest
  config.vbguest.auto_update = true
  # sync time every 10 seconds
  vb.customize [ "guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-interval", 10000 ]
  # adjustments if drift > 100 ms
  vb.customize [ "guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-min-adjust", 100 ]
  # sync time on restore
  vb.customize [ "guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-set-on-restore", 1 ]
  # sync time on start
  vb.customize [ "guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-set-start", 1 ]
  # at 1 second drift, the time will be set and not "smoothly" adjusted
  vb.customize [ "guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-set-threshold", 1000 ]  
end

Vagrant.configure("2") do |config|
  # always use Vagrants insecure key
  config.ssh.insert_key = false

  config.vm.box = "centos/7"

  # Type: virtualbox share data
  # Require a plugin: https://github.com/dotless-de/vagrant-vbguest
  # See https://github.com/mitchellh/vagrant/issues/7157
  if $share_folder == true
    # Enable vbguest auto update - require a plugin
    config.vbguest.auto_update = true
    config.vm.share_folder ".", "/vagrant", type: "virtualbox"
  else
    # disbale default shared folder
    config.vm.synced_folder ".", "/vagrant", disabled: true
  end

  # Require plugin: vagrant-hostmanager
  # configure the host's /etc/hosts with vm names
  if $update_etc_hostname == true
    config.hostmanager.enabled = true
    config.hostmanager.manage_host = true
  else 
    config.hostmanager.enabled = false
    config.hostmanager.manage_host = false
  end

  # Configure virtual machines
  (1..$num_instances).each do |i|
    config.vm.define vm_name = "%s-%02d" % [$instance_name_prefix, i] do |config|
      config.vm.hostname = vm_name
      config.vm.provider :virtualbox do |vb|
        vb.gui = false
        add_hdd_ide(vm_name, vb, 5)
        config_time_sync(config, vb)
        vb.memory = $vm_memory
        vb.cpus = $vm_cpus
        if $vm_executioncap < 100
          vb.customize ["modifyvm", :id, "--cpuexecutioncap", $vm_executioncap]
        end
      end
      ip = "192.168.50.#{i+100}"
      config.vm.network :private_network, ip: ip
    end
  end
  # File provision
  config.vm.provision :file do |file|
    file.source = "./" #default to ansible folder
    file.destination = "${HOME}/ansible"
  end
  #Ansible provision
  #Inventory file is .vagrant/provisioners/ansible/inventory/vagrant_ansible_inventory
  config.vm.provision :ansible do |ansible|
    ansible.playbook = "ansible/ping.yml"
  end

end